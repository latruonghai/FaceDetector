# -*- coding: utf-8 -*-
"""Recognize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HZc806rxngEDQ9QdV_0OXrR9stkLMHJG
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install face_recognition

"""## Cài đặt thư viện

Tải lên Model cho việc demo
"""

import pickle
"""with open('/content/gdrive/My Drive/ML1/lr.sav','rb') as f:
  model_lr = pickle.load(open(f))"""
#model_lr = pickle.load(open('/content/gdrive/My Drive/lr_model_new.sav','rb'))
# Model with 'object detection'
model_svc = pickle.load(open('/content/drive/My Drive/ML1/svc.sav','rb'))
# Model with 'face_recognition'
model_svc_new = pickle.load(open('/content/drive/My Drive/OpenCv/svc.sav','rb'))

"""Import thư viện cần thiết"""

#import CropFace
# To link to the path containing the image folders
import os
import cv2
import face_recognition
import dlib
# HOG function
from skimage.feature import hog
from skimage import exposure
from skimage.color import rgb2gray
import numpy as np
from skimage import io
from google.colab.patches import cv2_imshow
path_train = 'gdrive/My Drive/ML/Train'
path_test = 'gdrive/My Drive/ML/Test'

"""## Các bước Demo

Nhận diện khuôn mặt (face_recognition)
"""

# With face_recognize
""" 
We recognite the face in the image and encoding it to 128D array to train with model
For examples: a image with size: 216x216
We recognite the face in it and encoding it to 128D
"""
def face_recognize (paths):
  img = cv2.imread(paths)
  #img = cv2.resize(img,(50,50))
  # Encoding to 128D array
  imgs = face_recognition.face_encodings(img)
  if len(imgs)>0:
    return imgs[0]
  # If cannot recognite the face, return a NULL list
  else:
    return []

"""With the faces encoded in each image that we used function face_recognition,
 we add it to the list of image (x_train)
And the label is the name of the folder containing the images
The function return a list of 128D array
"""
def cvrt_fr(path):
  image = []
  lable = []
  for folder in os.listdir(path):
    for files in os.listdir(path + '/' + folder):
      files_name = path + '/' + folder + '/' + files
      imgs = face_recognize(files_name)
      if len(imgs)>0:
        image.append(imgs)
        lable.append(folder)
      else:
        continue
  return image, lable

"""Nhận diện vật thể (object_detection)"""

# With Object_detection
"""With every image, we use HOG function to pick the face in the folders and change rescale intensity
these hog_img, it represent to the image
Example: the folder have image named: ABC.jpg.
This image have size: 216x216, we read it by cv2.imread.
The we use HOG function to histogram the feature which are important and
rescale intensity it.
After that we add it to images list (x_train), and  lable(y_train)
"""
def obj_Detect(img):
  img = cv2.resize(img,(216,216))
  img = rgb2gray(img)
      # Chuyen hinh anh ve dang cac dang object
      # Use Hog function
  fd_perer, imgs_per = hog(img, orientations=8, pixels_per_cell=(8, 8),
              cells_per_block=(3, 3), visualize=True)
  imgs_per = exposure.rescale_intensity(imgs_per,in_range = (0,0.04))
      #img_canny = canny(img, sigma=2)
      #hog()

      #imgss = np.round(img.flatten(), 2)
      #print(imgss)
  imgs = np.reshape(imgs_per,216*216)
  return imgs
  #return np.round(np.asarray([imgs]),2)
# Chuyen hang loat anh
def cvrt_od(path):
  image = []
  lable = []

  for folder in os.listdir(path):
    for files in os.listdir(path + '/' + folder):
      files_name = path + '/' + folder + '/' + files
      img = io.imread(files_name)
      imgs = obj_Detect(img)
      image.append(imgs)
      lable.append(folder)

  return np.asarray(image),np.asarray(lable)

"""Hàm sử dụng cho việc tải lên số lượng lớn ảnh"""

#Doc Anh
"""
Read images in paths
"""
def read_path(path,fr = 0):
  if fr==1:
   return cvrt_fr(path)
  else:
    return cvrt_od(path)

"""#Demo Chính

Cắt ảnh trong ảnh tải lên và dùng ảnh đã cắt để predict khuôn mặt
"""

# Cat va du doan anh
"""
Demonstrate the images:
  - Function 'svc_det_fr(image)': return the predict label of the 'image' use model svc 
      with 'face recognition'
  - Function 'svc_det_od(image)': return the predict label of the 'image' use model svc
      with 'object_detection'
"""
def crDect_face(path,fn):

  faceCasCade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
  cap = cv2.VideoCapture(0)

  # Doc hinh

  img = cv2.imread(path)
  # Resize the smaller image with the same ratio
  img  = cv2.resize(img,(400,int(img.shape[0]*400/img.shape[1])))
  img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
  img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
  # convert the YUV image back to RGB format
  
  img_output = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
      #grayImag = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    # Detect the face in each image
  face = faceCasCade.detectMultiScale(
          img_output,
          scaleFactor = 1.1,
          minNeighbors = 5,
          minSize = (30,30))
  for (x,y,w,h) in face:
    #sampleNum=sampleNum+1
    image = img[y:y+h,x:x+w]
    # Use the funtion ralated in mode
    result = eval(fn+'(image)')
          #Lưu ảnh khuôn mặt vào thư mục có tên(creatình
          #if not os.path.exists(path +'/'+createf): os.mkdir(path +'/'+createf)
          # Thểm ảnh xoay
          # Thêm ảnh đã cắt
          #cv2.imwrite(path+'/'+createf+"/"+name_file+'-'+ str(sampleNum) + ".jpg", cv2.resize(image,(216,216)))
      # Hiển thị ra màn hình
    cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0), 2)
    # Put the text on the rectangle
    cv2.putText(img, result[0], (x-10, y-10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    print(x,y)

          #if sampleNum>200:
              #break
  cv2_imshow(cv2.resize(img,(500,int(img.shape[0]*500/img.shape[1]))))
  return image
# Dua anh ve dinh dang object cua model_svc_thuong

"""*  Sử dụng Face_recognition"""

# Voi Face_recognition
""" 
Use face_encodings to convert image to 128D array containing the features.
With this array, we can predict it with model svc use "face recognition" module
"""
img_size = 50
def svc_det_fr(image):
  #img = cv2.imread(path)
  # Face Recognition
  img_enc=face_recognition.face_encodings(image)
  result = model_svc_new.predict(img_enc[0].reshape(1,-1)) if len(img_enc)!=0 else ['unknown']
  return result

"""*   Sử dụng Object detection"""

# Voi SVC_object_detection
"""
Like 'svc_det_ft()' function, we use hog to convert image to another array with another shape.
The hog can be useful with face classification.
"""
def svc_det_od(image):
  imgs = np.asarray([obj_Detect(image)])
  return model_svc.predict(imgs)

mode_1 = "svc_det_fr"

mode_2 = "svc_det_od"
# Insert Picture

image = cv2.imread(paths)

"""## Thực hiện Demo mô hình

Trích dẫn đường dẫn ảnh và predict

> SVC use face_recognition
"""

paths = "/content/d.jpg"
image = cv2.imread(paths)
print("Mode: SVC with face recognition:\n")
img = crDect_face(paths,mode_1)
#test_x = read(img)
#pred_svc = model_svc.predict(test_x)
#pred_lr = model_lr.predict(test_x)

""">SVC use object_detection"""

print("Mode: SVC with object detection:\n")
img = crDect_face(paths,mode_2)

# Commented out IPython magic to ensure Python compatibility.
path_train = 'drive/My Drive/ML/Train'
# %time x_train,y_train = read_path(path_train)
path_test = 'drive/My Drive/ML/Test'
# %time x_test, y_test =read_path(path_test)
# Model higher
#%time X_train,Y_train = read_path(path_train,1)
#%time X_test,Y_test = read_path(path_test,1)

x_train

from sklearn.svm import SVC
#svc =SVC(kernel = 'rbf',C = 5,gamma = 0.0005)
#svc.fit(x_train,y_train)
#model_lr.fit(x_train,y_train)
model_svc.fit(x_train,y_train)

from sklearn.metrics import accuracy_score
pred = model_svc.predict(x_test)
print(accuracy_score(y_test,pred))

# Commented out IPython magic to ensure Python compatibility.
# %time model_svc_new.fit(X_train,Y_train)

from sklearn.metrics import confusion_matrix, classification_report
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))

import pickle
files = open("/content/drive/My Drive/ML1/svc.sav",'wb')
pickle.dump(model_svc,files)

files = open("/content/gdrive/My Drive/OpenCv/predict_within_10_people.sav",'wb')
pickle.dump(model_svc,files)

